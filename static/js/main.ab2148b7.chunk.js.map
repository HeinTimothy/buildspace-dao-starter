{"version":3,"sources":["pants.png","App.jsx","index.js"],"names":["sdk","ThirdwebSDK","console","log","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","memberList","useMemo","map","addresses","tokenAmount","ethers","utils","formatUnits","useEffect","getAll","then","catch","err","length","proposalId","getAllClaimerAddresses","getAllHolderBalances","amounts","balanceOf","balance","gt","UnsupportedChainIdError","className","onClick","src","pants","style","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","delegation","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.ab2148b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pants.c25d8139.png\";","import { useEffect, useMemo, useState } from 'react';\r\n\r\nimport { useWeb3 } from '@3rdweb/hooks';\r\nimport { ThirdwebSDK } from '@3rdweb/sdk';\r\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\r\nimport { ethers } from 'ethers';\r\n\r\nimport pants from './pants.png'\r\n\r\nconst sdk = new ThirdwebSDK(\"rinkeby\");\r\nconsole.log(sdk);\r\nconst bundleDropModule = sdk.getBundleDropModule(\"0xAa53cC974DF9f1c9516C7fEf3e4f263b3F973Ffc\");\r\nconst tokenModule = sdk.getTokenModule(\"0xb0cBEA94C3C4eDf119af6CA601ce2FB9741681B7\");\r\nconst voteModule = sdk.getVoteModule(\"0xBa0921679D29294C017af8f1214E544d455E16f6\");\r\n\r\nconst App = () => {\r\n\r\n  const { connectWallet, address, error, provider } = useWeb3();\r\n  console.log(\"ðŸ‘‹ Address:\", address);\r\n\r\n  //const signer = provider ? provider.getSigner() : undefined;\r\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\r\n  const [isClaiming, setIsClaiming] = useState(false);\r\n\r\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\r\n  const [memberAddresses, setMemberAddresses] = useState([]);\r\n\r\n  const [proposals, setProposals] = useState([]);\r\n  const [isVoting, setIsVoting] = useState(false);\r\n  const [hasVoted, setHasVoted] = useState(false);\r\n\r\n\r\n  const memberList = useMemo(() => {\r\n    return memberAddresses.map((addresses) => {\r\n      return {\r\n        address,\r\n        tokenAmount: ethers.utils.formatUnits(memberTokenAmounts[address] || 0, 2)\r\n      }\r\n    })\r\n  }, [memberAddresses, memberTokenAmounts])\r\n\r\n  const shortenAddress = (str) => {\r\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) {\r\n      return;\r\n    }\r\n    // A simple call to voteModule.getAll() to grab the proposals.\r\n    voteModule.getAll().then((proposals) => {\r\n      // Set state!\r\n      setProposals(proposals);\r\n      console.log(\"ðŸŒˆ Proposals:\", proposals)\r\n    }).catch((err) => {\r\n      console.error(\"failed to get proposals\", err);\r\n    });\r\n  }, [hasClaimedNFT]);\r\n\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) {\r\n      return;\r\n    }\r\n\r\n    // If we haven't finished retrieving the proposals from the useEffect above\r\n    // then we can't check if the user voted yet!\r\n    if (!proposals.length) {\r\n      return;\r\n    }\r\n\r\n    // Check if the user has already voted on the first proposal.\r\n    voteModule.hasVoted(proposals[0].proposalId, address).then((hasVoted) => {\r\n      setHasVoted(hasVoted);\r\n      if (hasVoted) {\r\n        console.log(\"ðŸ¥µ User has already voted\")\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"failed to check if wallet has voted\", err);\r\n    });\r\n}, [hasClaimedNFT, proposals, address]);\r\n\r\n\r\n  useEffect(() => {\r\n    if(!hasClaimedNFT) {\r\n      return\r\n    }\r\n\r\n    bundleDropModule.getAllClaimerAddresses(\"0\").then((addresses) => {\r\n      console.log(\"ðŸš€ Members addresses\", addresses)\r\n      setMemberAddresses(addresses)\r\n    }).catch((error) => {\r\n      console.error(\"failed to get member list\", error);\r\n    });\r\n  }, [hasClaimedNFT])\r\n\r\n  useEffect(() => {\r\n  if (!hasClaimedNFT) {\r\n    return;\r\n  }\r\n\r\n  tokenModule.getAllHolderBalances().then((amounts) => {\r\n      console.log(\"ðŸ‘œ Amounts\", amounts)\r\n      setMemberTokenAmounts(amounts);\r\n    }).catch((error) => {\r\n      console.error(\"failed to get token amounts\", error);\r\n    });\r\n  }, [hasClaimedNFT]);\r\n\r\n\r\n  useEffect(() => {\r\n    if(!address) {\r\n      return;\r\n    }\r\n\r\n    return bundleDropModule\r\n      .balanceOf(address, \"0\")\r\n      .then((balance) => {\r\n        if(balance.gt(0)) {\r\n          setHasClaimedNFT(true)\r\n          console.log(\"ðŸŒŸ this user has a membership NFT!\")\r\n        } else {\r\n          setHasClaimedNFT(false);\r\n          console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setHasClaimedNFT(false);\r\n        console.error(\"failed to get nft balance\", error)\r\n      })\r\n  }, [address])\r\n/*\r\n  useEffect(() => {\r\n    sdk.setProviderOrSigner(signer);\r\n  }, [signer])\r\n*/\r\n\r\n  if (error instanceof UnsupportedChainIdError ) {\r\n    return (\r\n      <div className=\"unsupported-network\">\r\n        <h2>Please connect to Rinkeby</h2>\r\n        <p>\r\n          This dapp only works on the Rinkeby network, please switch networks\r\n          in your connected wallet.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if(!address) {\r\n    return (\r\n      <div className=\"landing\">\r\n        <h1>Welcome to Flannel DAO</h1>\r\n        <h3>Flannel pjs are the new business formal</h3>\r\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\r\n          Connect your wallet\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (hasClaimedNFT) {\r\n    return (\r\n      <div className=\"member-page\">\r\n        <h1>Flannel DAO Member Page <img src={pants} style={{\"width\": \"2rem\", \"objectFit\": \"contain\"}}/></h1>\r\n        <p>Welcome! ðŸŽ‰</p>\r\n        <div>\r\n          <div>\r\n            <h2>Member List</h2>\r\n            <table>\r\n              <tbody>\r\n                {memberList.map((member) => {\r\n                  return (\r\n                    <tr key={member.address}>\r\n                      <td>\r\n                        <span style={{\"backgroundColor\": \"#065f46\", \"padding\": \"0 4px\", \"borderRadius\": \"2px\"}}>\r\n                          {shortenAddress(member.address)}\r\n                        </span>\r\n                      </td>\r\n                      <td>{member.tokenAmount}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <h2>Active Proposals</h2>\r\n            <form\r\n              onSubmit={async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                //before we do async things, we want to disable the button to prevent double clicks\r\n                setIsVoting(true);\r\n\r\n                // lets get the votes from the form for the values\r\n                const votes = proposals.map((proposal) => {\r\n                  let voteResult = {\r\n                    proposalId: proposal.proposalId,\r\n                    //abstain by default\r\n                    vote: 2,\r\n                  };\r\n                  proposal.votes.forEach((vote) => {\r\n                    const elem = document.getElementById(\r\n                      proposal.proposalId + \"-\" + vote.type\r\n                    );\r\n\r\n                    if (elem.checked) {\r\n                      voteResult.vote = vote.type;\r\n                      return;\r\n                    }\r\n                  });\r\n                  return voteResult;\r\n                });\r\n\r\n                // first we need to make sure the user delegates their token to vote\r\n                try {\r\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\r\n                  const delegation = await tokenModule.getDelegationOf(address);\r\n                  console.log(\"delegation\", delegation);\r\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\r\n                  if (delegation === ethers.constants.AddressZero) {\r\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\r\n                    console.log(\"3\");\r\n                    console.log(tokenModule.delegateTo);\r\n                    console.log(address);\r\n                    await tokenModule.delegateTo(address);\r\n                    console.log(\"4\");\r\n                  }\r\n                  // then we need to vote on the proposals\r\n                  try {\r\n                    await Promise.all(\r\n                      votes.map(async (vote) => {\r\n                        // before voting we first need to check whether the proposal is open for voting\r\n                        // we first need to get the latest state of the proposal\r\n                        const proposal = await voteModule.get(vote.proposalId);\r\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\r\n                        if (proposal.state === 1) {\r\n                          // if it is open for voting, we'll vote on it\r\n                          return voteModule.vote(vote.proposalId, vote.vote);\r\n                        }\r\n                        // if the proposal is not open for voting we just return nothing, letting us continue\r\n                        return;\r\n                      })\r\n                    );\r\n                    try {\r\n                      // if any of the propsals are ready to be executed we'll need to execute them\r\n                      // a proposal is ready to be executed if it is in state 4\r\n                      await Promise.all(\r\n                        votes.map(async (vote) => {\r\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\r\n                          const proposal = await voteModule.get(\r\n                            vote.proposalId\r\n                          );\r\n\r\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\r\n                          if (proposal.state === 4) {\r\n                            return voteModule.execute(vote.proposalId);\r\n                          }\r\n                        })\r\n                      );\r\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\r\n                      setHasVoted(true);\r\n                      // and log out a success message\r\n                      console.log(\"successfully voted\");\r\n                    } catch (err) {\r\n                      console.error(\"failed to execute votes\", err);\r\n                    }\r\n                  } catch (err) {\r\n                    console.error(\"failed to vote\", err);\r\n                  }\r\n                } catch (err) {\r\n                  console.error(\"failed to delegate tokens\", err);\r\n                } finally {\r\n                  // in *either* case we need to set the isVoting state to false to enable the button again\r\n                  setIsVoting(false);\r\n                }\r\n              }}\r\n            >\r\n              {proposals.map((proposal, index) => (\r\n                <div key={proposal.proposalId}>\r\n                  <h5\r\n                    style={{\"color\": \"#fff\"}}\r\n                  >\r\n                    {proposal.description}\r\n                  </h5>\r\n                  <div>\r\n                    {proposal.votes.map((vote) => (\r\n                      <div key={vote.type}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          id={proposal.proposalId + \"-\" + vote.type}\r\n                          name={proposal.proposalId}\r\n                          value={vote.type}\r\n                          defaultChecked={vote.type === 2}\r\n                        />\r\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type} style={{\"color\": vote.type === 0 ? \"#be123c\" : vote.type === 1 ? \"#065f46\" : \"#fff\"}}>\r\n                          {vote.label}\r\n                        </label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <button disabled={isVoting || hasVoted} type=\"submit\">\r\n                {isVoting\r\n                  ? \"Voting...\"\r\n                  : hasVoted\r\n                    ? \"You Already Voted\"\r\n                    : \"Submit Votes\"}\r\n              </button>\r\n              <small>\r\n                This will trigger multiple transactions that you will need to\r\n                sign.\r\n              </small>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const mintNFT = () => {\r\n    setIsClaiming(true)\r\n    bundleDropModule\r\n      .claim(\"0\", 1)\r\n      .catch((err) => {\r\n        console.error(\"failed to claim\", err);\r\n      })\r\n      .finally(() => {\r\n        setIsClaiming(false);\r\n        setHasClaimedNFT(true)\r\n        console.log(\r\n        `ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\r\n      );\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"mint-nft\">\r\n      <h1>Mint your free Flannel DAO NFT</h1>\r\n      <button\r\n        disabled={isClaiming}\r\n        onClick={() => mintNFT()}\r\n      >\r\n        {isClaiming ? \"Minting...\" : \"Mint your nft!\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\n\r\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\r\n\r\nconst supportedChainIds = [4];\r\n\r\nconst connectors ={\r\n  injected: {}\r\n}\r\n\r\n// Render the App component to the DOM\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThirdwebWeb3Provider\r\n      connectors={connectors}\r\n      supportedChainIds={supportedChainIds}\r\n    >\r\n      <div className=\"landing\">\r\n        <App />\r\n      </div>\r\n    </ThirdwebWeb3Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}